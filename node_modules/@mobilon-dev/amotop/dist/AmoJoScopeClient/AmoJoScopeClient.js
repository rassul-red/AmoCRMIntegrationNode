"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmoJoScopeClient = void 0;
var crypto_1 = require("crypto");
var axios_1 = require("axios");
var axios_logger_1 = require("axios-logger");
var AmoJoScopeClient = (function () {
    function AmoJoScopeClient(options) {
        this.amoChatDomain = options.amoChatDomain ? options.amoChatDomain : 'amojo.amocrm.ru';
        if (!options.scopeId) {
            throw new Error('ERROR_NO_SCOPEID');
        }
        this.scopeId = options.scopeId;
        if (!options.channelSecret) {
            throw new Error('ERROR_NO_CHANNELSECRET');
        }
        this.channelSecret = options.channelSecret;
        this.instance = axios_1.default.create({
            baseURL: "https://".concat(this.amoChatDomain, "/v2/origin/custom"),
            headers: {
                'Content-Type': 'application/json',
            },
            timeout: options.timeout || 10000,
        });
        if (options === null || options === void 0 ? void 0 : options.debug) {
            var config_1 = {
                prefixText: 'AmoJoScopeClient',
                headers: false,
                params: true,
            };
            this.instance.interceptors.request.use(function (request) {
                return (0, axios_logger_1.requestLogger)(request, config_1);
            });
            this.instance.interceptors.response.use(function (response) {
                return (0, axios_logger_1.responseLogger)(response, config_1);
            });
        }
    }
    AmoJoScopeClient.prototype.sendRequest = function (method, url, options) {
        return __awaiter(this, void 0, void 0, function () {
            var content, bodyContent, checkSum, date, hashString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        content = options && options.data ? options.data : '';
                        bodyContent = (content === '') ? '' : JSON.stringify(content);
                        checkSum = this.createCheckSum(method, bodyContent);
                        date = (new Date()).toUTCString();
                        hashString = [
                            method.toUpperCase(),
                            checkSum,
                            'application/json',
                            date,
                            "/v2/origin/custom".concat(url),
                        ].join('\n');
                        return [4, this.instance(__assign({ method: method, url: url, headers: {
                                    'Date': date,
                                    'Content-MD5': checkSum,
                                    'X-Signature': this.createSignatureForRequestBody(hashString),
                                } }, options))];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoJoScopeClient.prototype.createSignatureForRequestBody = function (body) {
        return (0, crypto_1.createHmac)('sha1', this.channelSecret).update(body).digest('hex');
    };
    AmoJoScopeClient.prototype.createCheckSum = function (method, bodyContent) {
        var body = (method.toLowerCase() === 'get') ? '' : bodyContent;
        return (0, crypto_1.createHash)('md5').update(body).digest('hex');
    };
    AmoJoScopeClient.prototype.getChatDto = function (amojoUserId) {
        return {
            conversation_id: (0, crypto_1.randomUUID)(),
            user: {
                ref_id: amojoUserId,
            },
        };
    };
    AmoJoScopeClient.prototype.createChat = function (chatDto) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.sendRequest('POST', "/".concat(this.scopeId, "/chats"), { data: chatDto })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoJoScopeClient.prototype.sendMessage = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = {
                            event_type: 'new_message',
                            payload: payload,
                        };
                        return [4, this.sendRequest('POST', "/".concat(this.scopeId), { data: data })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoJoScopeClient.prototype.getChatHistory = function (conversationId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.sendRequest('GET', "/".concat(this.scopeId, "/chats/").concat(conversationId, "/history"))];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoJoScopeClient.prototype.updateMessageStatus = function (msgid, deliveryStatus, errorCode, error) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = {
                            msgid: msgid,
                            delivery_status: deliveryStatus,
                            error_code: errorCode ? errorCode : null,
                            error: error ? error : null,
                        };
                        return [4, this.sendRequest('POST', "/".concat(this.scopeId, "/").concat(msgid, "/delivery_status"), { data: data })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoJoScopeClient.prototype.getSenderReceiverFromBot = function (params) {
        return {
            sender: {
                id: (0, crypto_1.randomUUID)(),
                ref_id: params.channelBotId,
                name: 'Bot',
            },
            receiver: {
                id: (0, crypto_1.randomUUID)(),
                name: 'Unknown',
            },
        };
    };
    AmoJoScopeClient.prototype.getConversationIds = function (conversationId) {
        return {
            conversation_id: (0, crypto_1.randomUUID)(),
            conversation_ref_id: conversationId,
        };
    };
    AmoJoScopeClient.prototype.getSilent = function (silent) {
        return silent ? { silent: true, } : null;
    };
    AmoJoScopeClient.prototype.getMessageIdAndDate = function () {
        var time = (new Date()).getTime();
        return {
            msec_timestamp: time,
            timestamp: Math.floor(time / 1000),
            msgid: (0, crypto_1.randomUUID)(),
        };
    };
    AmoJoScopeClient.prototype.getMessageDate = function () {
        var time = (new Date()).getTime();
        return {
            msec_timestamp: time,
            timestamp: Math.floor(time / 1000),
        };
    };
    AmoJoScopeClient.prototype.getSource = function (sourceExternalId) {
        return sourceExternalId ? {
            source: {
                external_id: sourceExternalId,
            },
        } : null;
    };
    AmoJoScopeClient.prototype.getSenderRecieverFromUser = function (params) {
        return {
            sender: {
                id: (0, crypto_1.randomUUID)(),
                ref_id: params.amojoUserId,
                name: 'Unknown',
            },
            receiver: {
                id: (0, crypto_1.randomUUID)(),
                name: 'Unknown',
            },
        };
    };
    AmoJoScopeClient.prototype.getSenderReceiverFromContact = function (params) {
        return {
            sender: {
                id: (0, crypto_1.randomUUID)(),
                name: params.senderName,
            },
        };
    };
    AmoJoScopeClient.prototype.getQuoteSender = function (params) {
        return this.getSenderReceiverFromContact(params);
    };
    AmoJoScopeClient.prototype.getTextMessage = function (params) {
        return {
            message: {
                type: 'text',
                text: params.message,
            },
        };
    };
    AmoJoScopeClient.prototype.getImageMessage = function (params) {
        return {
            message: {
                type: 'picture',
                text: params.message ? params.message : null,
                media: params.mediaUrl,
            },
        };
    };
    AmoJoScopeClient.prototype.getVideoMessage = function (params) {
        return {
            message: {
                type: 'video',
                text: params.message ? params.message : null,
                media: params.mediaUrl,
            },
        };
    };
    AmoJoScopeClient.prototype.getAudioMessage = function (params) {
        return {
            message: {
                type: 'voice',
                text: params.message ? params.message : null,
                media: params.mediaUrl,
            },
        };
    };
    AmoJoScopeClient.prototype.getTextPayloadFromBot = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderReceiverFromBot({ channelBotId: params.channelBotId })), this.getTextMessage({ message: params.message }));
    };
    AmoJoScopeClient.prototype.getTextPayloadFromUser = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderRecieverFromUser({ amojoUserId: params.amojoUserId })), this.getTextMessage({ message: params.message }));
    };
    AmoJoScopeClient.prototype.getTextPayloadFromContact = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderReceiverFromContact({ senderName: params.senderName })), this.getTextMessage({ message: params.message }));
    };
    AmoJoScopeClient.prototype.getQuoteTextMessage = function (params) {
        return {
            reply_to: {
                message: __assign(__assign(__assign({}, (this.getTextMessage({ message: params.message }).message)), this.getMessageIdAndDate()), this.getQuoteSender({ senderName: params.senderName }))
            }
        };
    };
    AmoJoScopeClient.prototype.getQuoteImageMessage = function (params) {
        return {
            reply_to: {
                message: __assign(__assign(__assign({}, (this.getImageMessage({ mediaUrl: params.mediaUrl }).message)), this.getMessageDate()), this.getQuoteSender({ senderName: params.senderName }))
            }
        };
    };
    AmoJoScopeClient.prototype.getQuoteVideoMessage = function (params) {
        return {
            reply_to: {
                message: __assign(__assign(__assign({}, (this.getVideoMessage({ mediaUrl: params.mediaUrl }).message)), this.getMessageDate()), this.getQuoteSender({ senderName: params.senderName }))
            }
        };
    };
    AmoJoScopeClient.prototype.getImagePayloadFromBot = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderReceiverFromBot({ channelBotId: params.channelBotId })), this.getImageMessage({ message: params.message, mediaUrl: params.mediaUrl }));
    };
    AmoJoScopeClient.prototype.getImagePayloadFromUser = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderRecieverFromUser({ amojoUserId: params.amojoUserId })), this.getImageMessage({ message: params.message, mediaUrl: params.mediaUrl }));
    };
    AmoJoScopeClient.prototype.getImagePayloadFromContact = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderReceiverFromContact({ senderName: params.senderName })), this.getImageMessage({ message: params.message, mediaUrl: params.mediaUrl }));
    };
    AmoJoScopeClient.prototype.getVideoPayloadFromBot = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderReceiverFromBot({ channelBotId: params.channelBotId })), this.getVideoMessage({ message: params.message, mediaUrl: params.mediaUrl }));
    };
    AmoJoScopeClient.prototype.getVideoPayloadFromUser = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderRecieverFromUser({ amojoUserId: params.amojoUserId })), this.getVideoMessage({ message: params.message, mediaUrl: params.mediaUrl }));
    };
    AmoJoScopeClient.prototype.getVideoPayloadFromContact = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderReceiverFromContact({ senderName: params.senderName })), this.getVideoMessage({ message: params.message, mediaUrl: params.mediaUrl }));
    };
    AmoJoScopeClient.prototype.getAudioPayloadFromBot = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderReceiverFromBot({ channelBotId: params.channelBotId })), this.getAudioMessage({ message: params.message, mediaUrl: params.mediaUrl }));
    };
    AmoJoScopeClient.prototype.getAudioPayloadFromUser = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderRecieverFromUser({ amojoUserId: params.amojoUserId })), this.getAudioMessage({ message: params.message, mediaUrl: params.mediaUrl }));
    };
    AmoJoScopeClient.prototype.getAudioPayloadFromContact = function (params) {
        return __assign(__assign(__assign(__assign(__assign(__assign({}, this.getMessageIdAndDate()), this.getSilent(params.silent)), this.getSource(params.sourceExternalId)), this.getConversationIds(params.conversationId)), this.getSenderReceiverFromContact({ senderName: params.senderName })), this.getAudioMessage({ message: params.message, mediaUrl: params.mediaUrl }));
    };
    return AmoJoScopeClient;
}());
exports.AmoJoScopeClient = AmoJoScopeClient;
