import { AxiosInstance } from 'axios';
import { Task, Note, Tag, AmoApiClientOptions, GetLeadsParams, SourceParams, WebhookParams, PhoneCallParams, GetAccountParams, GetTalkParams, AddTagParams, Contact, Company } from './interfaces';
export declare class AmoApiClient {
    domain: string;
    axios: AxiosInstance;
    constructor(domain: string, accessToken: string, options?: AmoApiClientOptions);
    getWebhooks(): Promise<any>;
    setWebhook(params: WebhookParams): Promise<any>;
    getWebhookEvents(): string[];
    deleteWebhook({ destination }: any): Promise<any>;
    getAccount(paramIn?: GetAccountParams): Promise<any>;
    getUsers(): Promise<any>;
    getUserById(userId: number): Promise<any>;
    getLeads(params: GetLeadsParams): Promise<any>;
    getBaseLeadPayload(name: string, price: number, createdBy?: number): {
        name: string;
        created_by: number;
        price: number;
    };
    getPipelineLeadPayload(pipelineId: number, statusId?: number): {
        pipeline_id: number;
        status_id: number;
    };
    addLead(leadData: any): Promise<any>;
    getLeadLinks(leadId: number): Promise<any>;
    getLeadsNotes(params: any): Promise<any>;
    getLeadsTags(paramsIn: any): Promise<any>;
    addNoteToLead(leadId: number, note: Note): Promise<any>;
    getLeadById(leadId: number, params: any): Promise<any>;
    getLeadNoteById(leadId: number, noteId: number): Promise<any>;
    getLeadsCustomFields(paramsIn: any): Promise<any>;
    getLeadsCustomFieldGroups(): Promise<any>;
    getLeadsCustomFieldGroupById(groupId: string): Promise<any>;
    updateLead(data: any): Promise<any>;
    getLossReasons(): Promise<any>;
    addLeadsCustomFields(fields: any[]): Promise<any>;
    getPipelines(): Promise<any>;
    getPipelineById(pipelineId: number): Promise<any>;
    getPipelineStatuses(pipelineId: number): Promise<any>;
    getTasks(paramsIn: any): Promise<any>;
    getTaskById(taskId: number): Promise<any>;
    editTask(taskId: number, data: any): Promise<any>;
    addTask(task: Task): Promise<any>;
    getContacts(params: any): Promise<any>;
    addNoteToContact(contactId: number, note: Note): Promise<any>;
    getContactPayload(name: string, phone: string): Contact;
    addContact(contact: Contact): Promise<any>;
    getContact(contactId: number, params: any): Promise<any>;
    getContactLinks(contactId: number): Promise<any>;
    getLinksByEntityType(entityType: string, entityId: number): Promise<any>;
    getCustomFieldsByEntityType(entityType: string, params: any): Promise<any>;
    getContactsCustomFields(paramsIn: any): Promise<any>;
    getLeadsCustomFieldById(customFieldId: string): Promise<any>;
    getCompaniesCustomFieldById(customFieldId: string): Promise<any>;
    getContactsCustomFieldById(customFieldId: string): Promise<any>;
    getCustomFieldById(entityType: string, customFieldId: string): Promise<any>;
    getContactsTags(paramsIn: any): Promise<any>;
    getContactsCustomFieldGroups(): Promise<any>;
    getContactsCustomFieldGroupById(groupId: string): Promise<any>;
    addContactsCustomFields(fields: any[]): Promise<any>;
    private addCustomFields;
    updateContact(id: number, data: object): Promise<any>;
    getContactsChats(contactIds: number[]): Promise<any>;
    getContactChats(contactId: number): Promise<any>;
    attachChatToContact(chatId: string, contactId: number): Promise<any>;
    getEntityFiles(entityType: string, contactId: number): Promise<any>;
    getContactFiles(contactId: number): Promise<any>;
    getLeadFiles(leadId: number): Promise<any>;
    linkFileToContact(fileUUID: string, contactId: number): Promise<any>;
    linkFileToLead(fileUUID: string, leadId: number): Promise<any>;
    getCompanies(params: any): Promise<any>;
    getCompany(companyId: number, params: any): Promise<any>;
    addCompany(company: Company): Promise<any>;
    getCompanyLinks(companyId: number): Promise<any>;
    getCompanyNotes(companyId: number): Promise<any>;
    getCompanyNoteById(companyId: number, noteId: number): Promise<any>;
    getCompaniesNotes(params: any): Promise<any>;
    getCompanyFiles(companyId: number): Promise<any>;
    getCompaniesCustomFieldGroups(): Promise<any>;
    getCompaniesCustomFieldGroupById(groupId: string): Promise<any>;
    getCompaniesCustomFields(paramsIn: any): Promise<any>;
    getCompaniesTags(paramsIn: any): Promise<any>;
    getEvents(paramsIn: any): Promise<any>;
    getEventById(eventId: number, paramWith?: any): Promise<any>;
    getEventTypes(): Promise<any>;
    notifyPhoneCall(phoneNumber: string, userIds?: number[]): Promise<any>;
    addPhoneCall(phoneCall: PhoneCallParams): Promise<any>;
    getTalks(paramsIn?: GetTalkParams): Promise<any>;
    getUrl(url: string, options: any): Promise<any>;
    getTalkById(talkId: number): Promise<any>;
    closeTalkById(talkId: number, forceClose?: boolean): Promise<any>;
    getShortLinkForContact(url: string, contactId: number): Promise<any>;
    getNotesByEntityType(entityType: string, paramsIn: any): Promise<any>;
    getContactNotes(contactId: number): Promise<any>;
    getContactNoteById(contactId: number, noteId: number): Promise<any>;
    getContactsNotes(params: any): Promise<any>;
    getNotesByEntityId(entityType: string, entityId: number): Promise<any>;
    getNoteById(entityType: string, entityId: number, noteId: number): Promise<any>;
    addNote(entityType: string, entityId: number, note: Note): Promise<any>;
    getWidgets(params: any): Promise<any>;
    getWidget(widgetCode: string): Promise<any>;
    getSources(): Promise<any>;
    getSourceById(sourceId: number): Promise<any>;
    addSource(params: SourceParams): Promise<any>;
    deleteSourceById(sourceId: number): Promise<any>;
    getSalesBots(): Promise<any>;
    getTemplates(paramsIn: any): Promise<any>;
    getTemplateById(templateId: string): Promise<any>;
    updateTemplateById(templateId: string, template: any): Promise<any>;
    addTemplate(templates: any): Promise<any>;
    deleteTemplateById(templateId: string): Promise<any>;
    getLeadsWithFilter(params: any): Promise<any>;
    private getTags;
    getTagsForLeads(paramsIn: any): Promise<any>;
    private addTag;
    addTagForLeads(tag: AddTagParams): Promise<any>;
    private appendTags;
    appendTagsToLead(entityId: number, tags: Tag[]): Promise<any>;
    getUnsorted(paramsIn: any): Promise<any>;
    getUnsortedSummary(): Promise<any>;
    getUnsortedByUID(uid: string): Promise<any>;
    addUnsortedSip(data: any): Promise<any>;
    addUnsortedForms(data: any): Promise<any>;
    acceptUnsorted(uid: string, userId: number, statusId: number): Promise<any>;
    declineUnsorted(uid: string, userId?: number): Promise<any>;
    linkUnsorted(uid: string, data: any): Promise<any>;
}
