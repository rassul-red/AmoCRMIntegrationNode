"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmoApiClient = void 0;
var axios_1 = require("axios");
var axios_logger_1 = require("axios-logger");
var AmoApiClient = (function () {
    function AmoApiClient(domain, accessToken, options) {
        if (!domain) {
            throw new Error('ERROR_NO_DOMAIN');
        }
        this.domain = domain;
        if (!accessToken) {
            throw new Error('ERROR_NO_ACCESSTOKEN');
        }
        this.axios = axios_1.default.create({
            baseURL: "https://".concat(this.domain),
            headers: {
                Authorization: "Bearer ".concat(accessToken),
            },
            timeout: (options === null || options === void 0 ? void 0 : options.timeout) || 10000,
        });
        if (options === null || options === void 0 ? void 0 : options.debug) {
            var config_1 = {
                prefixText: 'AmoApiClient',
                headers: false,
                params: true,
            };
            this.axios.interceptors.request.use(function (request) {
                return (0, axios_logger_1.requestLogger)(request, config_1);
            });
            this.axios.interceptors.response.use(function (response) {
                return (0, axios_logger_1.responseLogger)(response, config_1);
            });
        }
    }
    AmoApiClient.prototype.getWebhooks = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/api/v4/webhooks';
                        return [4, this.axios.get(url)];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoApiClient.prototype.setWebhook = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/api/v4/webhooks';
                        return [4, this.axios.post(url, {
                                destination: params.destination,
                                settings: params.settings,
                            })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getWebhookEvents = function () {
        return [
            'responsible_lead',
            'responsible_contact',
            'responsible_company',
            'responsible_customer',
            'responsible_task',
            'restore_lead',
            'restore_contact',
            'restore_company',
            'add_lead',
            'add_contact',
            'add_company',
            'add_customer',
            'add_talk',
            'add_task',
            'update_lead',
            'update_contact',
            'update_company',
            'update_customer',
            'update_talk',
            'update_task',
            'delete_lead',
            'delete_contact',
            'delete_company',
            'delete_customer',
            'delete_task',
            'status_lead',
            'responsible_lead',
            'note_lead',
            'note_contact',
            'note_company',
            'note_customer',
            'add_chat_template_review',
        ];
    };
    AmoApiClient.prototype.deleteWebhook = function (_a) {
        return __awaiter(this, arguments, void 0, function (_b) {
            var url;
            var destination = _b.destination;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        url = '/api/v4/webhooks';
                        return [4, this.axios.delete(url, {
                                data: {
                                    destination: destination,
                                },
                            })];
                    case 1: return [2, (_c.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getAccount = function (paramIn) {
        return __awaiter(this, void 0, void 0, function () {
            var params, withArray, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        withArray = [];
                        if (paramIn === null || paramIn === void 0 ? void 0 : paramIn.amojo_id) {
                            withArray.push('amojo_id');
                        }
                        if (paramIn === null || paramIn === void 0 ? void 0 : paramIn.amojoId) {
                            withArray.push('amojo_id');
                        }
                        if (paramIn === null || paramIn === void 0 ? void 0 : paramIn.version) {
                            withArray.push('version');
                        }
                        if (paramIn === null || paramIn === void 0 ? void 0 : paramIn.amojoRights) {
                            withArray.push('amojo_rights');
                        }
                        if (paramIn === null || paramIn === void 0 ? void 0 : paramIn.driveUrl) {
                            withArray.push('drive_url');
                        }
                        if (paramIn === null || paramIn === void 0 ? void 0 : paramIn.isApiFilterEnabled) {
                            withArray.push('is_api_filter_enabled');
                        }
                        if (paramIn === null || paramIn === void 0 ? void 0 : paramIn.usersGroups) {
                            withArray.push('users_groups');
                        }
                        if (paramIn === null || paramIn === void 0 ? void 0 : paramIn.taskTypes) {
                            withArray.push('task_types');
                        }
                        url = '/api/v4/account';
                        if (withArray.length > 0) {
                            params = { with: withArray.join(',') };
                        }
                        return [4, this.axios.get(url, { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getUsers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = {
                            with: 'amojo_id',
                        };
                        return [4, this.axios.get('/api/v4/users', { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getUserById = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = {
                            with: 'amojo_id',
                        };
                        return [4, this.axios.get("/api/v4/users/".concat(userId), { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getLeads = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, query, filter, withP, url, filterArr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (params === null || params === void 0 ? void 0 : params.page) ? params === null || params === void 0 ? void 0 : params.page : 1;
                        limit = (params === null || params === void 0 ? void 0 : params.limit) ? params === null || params === void 0 ? void 0 : params.limit : 50;
                        query = (params === null || params === void 0 ? void 0 : params.query) ? params === null || params === void 0 ? void 0 : params.query : null;
                        filter = (params === null || params === void 0 ? void 0 : params.filter) ? params === null || params === void 0 ? void 0 : params.filter : null;
                        withP = (params === null || params === void 0 ? void 0 : params.with) ? params === null || params === void 0 ? void 0 : params.with : null;
                        url = "/api/v4/leads";
                        url += "?page=".concat(page, "&limit=").concat(limit);
                        if (query) {
                            url += "&query=".concat(query);
                        }
                        if (filter) {
                            filterArr = [];
                            if (filter.createdAtFrom) {
                                filterArr.push("filter[created_at][from]=".concat(filter.createdAtFrom));
                            }
                            if (filter.createdAtTo) {
                                filterArr.push("filter[created_at][to]=".concat(filter.createdAtTo));
                            }
                            url += "&" + filterArr.join('&');
                        }
                        if (withP) {
                            url += "&with=".concat(withP);
                        }
                        url = encodeURI(url);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getBaseLeadPayload = function (name, price, createdBy) {
        return {
            name: name,
            created_by: createdBy ? createdBy : 0,
            price: price,
        };
    };
    AmoApiClient.prototype.getPipelineLeadPayload = function (pipelineId, statusId) {
        return {
            pipeline_id: pipelineId,
            status_id: statusId ? statusId : 0,
        };
    };
    AmoApiClient.prototype.addLead = function (leadData) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads";
                        return [4, this.axios.post(url, [leadData])];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getLeadLinks = function (leadId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!leadId) {
                            throw new Error('no lead id');
                        }
                        return [4, this.getLinksByEntityType('leads', leadId)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoApiClient.prototype.getLeadsNotes = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getNotesByEntityType('leads', params)];
            });
        });
    };
    AmoApiClient.prototype.getLeadsTags = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getTags('leads', paramsIn)];
            });
        });
    };
    AmoApiClient.prototype.addNoteToLead = function (leadId, note) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.addNote('leads', leadId, note)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoApiClient.prototype.getLeadById = function (leadId, params) {
        return __awaiter(this, void 0, void 0, function () {
            var paramWith, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!leadId) {
                            throw new Error('no lead id');
                        }
                        paramWith = (params === null || params === void 0 ? void 0 : params.contacts) ? 'contacts' : null;
                        url = "/api/v4/leads/".concat(leadId, "?with=").concat(paramWith);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getLeadNoteById = function (leadId, noteId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getNoteById('leads', leadId, noteId)];
            });
        });
    };
    AmoApiClient.prototype.getLeadsCustomFields = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, params;
            return __generator(this, function (_a) {
                page = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page : 1;
                limit = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit : 50;
                params = { page: page, limit: limit };
                return [2, this.getCustomFieldsByEntityType('leads', params)];
            });
        });
    };
    AmoApiClient.prototype.getLeadsCustomFieldGroups = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads/custom_fields/groups";
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getLeadsCustomFieldGroupById = function (groupId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads/custom_fields/groups/".concat(groupId);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.updateLead = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads";
                        return [4, this.axios.patch(url, data)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getLossReasons = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads/loss_reasons";
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addLeadsCustomFields = function (fields) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.addCustomFields('leads', fields)];
            });
        });
    };
    AmoApiClient.prototype.getPipelines = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.get('/api/v4/leads/pipelines')];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getPipelineById = function (pipelineId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.get("/api/v4/leads/pipelines/".concat(pipelineId))];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getPipelineStatuses = function (pipelineId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.get("/api/v4/leads/pipelines/".concat(pipelineId, "/statuses"))];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getTasks = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, url, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page : 1;
                        limit = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit : 250;
                        url = "/api/v4/tasks";
                        params = { page: page, limit: limit };
                        return [4, this.axios.get(url, { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getTaskById = function (taskId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.get("/api/v4/tasks/".concat(taskId))];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.editTask = function (taskId, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.patch("/api/v4/tasks/".concat(taskId), { data: data })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addTask = function (task) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.post("/api/v4/tasks", task)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getContacts = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, query, withP, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (params === null || params === void 0 ? void 0 : params.page) ? params === null || params === void 0 ? void 0 : params.page : 1;
                        limit = (params === null || params === void 0 ? void 0 : params.limit) ? params === null || params === void 0 ? void 0 : params.limit : 50;
                        query = (params === null || params === void 0 ? void 0 : params.query) ? params === null || params === void 0 ? void 0 : params.query : null;
                        withP = (params === null || params === void 0 ? void 0 : params.with) ? params === null || params === void 0 ? void 0 : params.with : null;
                        url = "/api/v4/contacts";
                        url += "?page=".concat(page, "&limit=").concat(limit);
                        if (query) {
                            url += "&query=".concat(query);
                        }
                        if (withP) {
                            url += "&with=".concat(withP);
                        }
                        url = encodeURI(url);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addNoteToContact = function (contactId, note) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.addNote('contacts', contactId, note)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoApiClient.prototype.getContactPayload = function (name, phone) {
        return {
            name: name,
            custom_fields_values: [{
                    field_name: 'Телефон',
                    field_code: 'PHONE',
                    field_type: 'multitext',
                    values: [{
                            value: phone,
                        }],
                }],
            created_at: Date.now(),
        };
    };
    AmoApiClient.prototype.addContact = function (contact) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/contacts";
                        return [4, this.axios.post(url, [contact])];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getContact = function (contactId, params) {
        return __awaiter(this, void 0, void 0, function () {
            var paramWith, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!contactId) {
                            throw new Error('no contact id');
                        }
                        paramWith = (params === null || params === void 0 ? void 0 : params.leads) ? 'leads' : null;
                        url = "/api/v4/contacts/".concat(contactId, "?with=").concat(paramWith);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getContactLinks = function (contactId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!contactId) {
                            throw new Error('no contact id');
                        }
                        return [4, this.getLinksByEntityType('contacts', contactId)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoApiClient.prototype.getLinksByEntityType = function (entityType, entityId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/".concat(entityType, "/").concat(entityId, "/links");
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getCustomFieldsByEntityType = function (entityType, params) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/".concat(entityType, "/custom_fields");
                        return [4, this.axios.get(url, { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getContactsCustomFields = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, params;
            return __generator(this, function (_a) {
                page = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page : 1;
                limit = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit : 50;
                params = { page: page, limit: limit };
                return [2, this.getCustomFieldsByEntityType('contacts', params)];
            });
        });
    };
    AmoApiClient.prototype.getLeadsCustomFieldById = function (customFieldId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getCustomFieldById('leads', customFieldId)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoApiClient.prototype.getCompaniesCustomFieldById = function (customFieldId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getCustomFieldById('companies', customFieldId)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoApiClient.prototype.getContactsCustomFieldById = function (customFieldId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getCustomFieldById('contacts', customFieldId)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoApiClient.prototype.getCustomFieldById = function (entityType, customFieldId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/".concat(entityType, "/custom_fields/").concat(customFieldId);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getContactsTags = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getTags('contacts', paramsIn)];
            });
        });
    };
    AmoApiClient.prototype.getContactsCustomFieldGroups = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/contacts/custom_fields/groups";
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getContactsCustomFieldGroupById = function (groupId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/contacts/custom_fields/groups/".concat(groupId);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addContactsCustomFields = function (fields) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.addCustomFields('contacts', fields)];
            });
        });
    };
    AmoApiClient.prototype.addCustomFields = function (entityType, fields) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/".concat(entityType, "/custom_fields");
                        return [4, this.axios.post(url, fields)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.updateContact = function (id, data) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/contacts/".concat(id);
                        return [4, this.axios.patch(url, data)];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoApiClient.prototype.getContactsChats = function (contactIds) {
        return __awaiter(this, void 0, void 0, function () {
            var contactIdsString, url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contactIdsString = contactIds.join(',');
                        url = "/api/v4/contacts/chats?contact_id=".concat(contactIdsString);
                        return [4, this.axios.get(url)];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoApiClient.prototype.getContactChats = function (contactId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getContactsChats([contactId])];
            });
        });
    };
    AmoApiClient.prototype.attachChatToContact = function (chatId, contactId) {
        return __awaiter(this, void 0, void 0, function () {
            var url, body, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/contacts/chats";
                        body = JSON.stringify([{ contact_id: contactId, chat_id: chatId }]);
                        return [4, this.axios.post(url, body)];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoApiClient.prototype.getEntityFiles = function (entityType, contactId) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/".concat(entityType, "/").concat(contactId, "/files");
                        return [4, this.axios.get(url)];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoApiClient.prototype.getContactFiles = function (contactId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getEntityFiles('contacts', contactId)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoApiClient.prototype.getLeadFiles = function (leadId) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads/".concat(leadId, "/files");
                        return [4, this.axios.get(url)];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoApiClient.prototype.linkFileToContact = function (fileUUID, contactId) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/contacts/".concat(contactId, "/files");
                        return [4, this.axios.put(url, [{ file_uuid: fileUUID }])];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoApiClient.prototype.linkFileToLead = function (fileUUID, leadId) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads/".concat(leadId, "/files");
                        return [4, this.axios.put(url, [{ file_uuid: fileUUID }])];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoApiClient.prototype.getCompanies = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, query, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (params === null || params === void 0 ? void 0 : params.page) ? params === null || params === void 0 ? void 0 : params.page : 1;
                        limit = (params === null || params === void 0 ? void 0 : params.limit) ? params === null || params === void 0 ? void 0 : params.limit : 50;
                        query = (params === null || params === void 0 ? void 0 : params.query) ? params === null || params === void 0 ? void 0 : params.query : null;
                        url = "/api/v4/companies";
                        url += "?page=".concat(page, "&limit=").concat(limit);
                        if (query) {
                            url += "&query=".concat(query);
                        }
                        url = encodeURI(url);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getCompany = function (companyId, params) {
        return __awaiter(this, void 0, void 0, function () {
            var paramWith, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!companyId) {
                            throw new Error('no company id');
                        }
                        paramWith = (params === null || params === void 0 ? void 0 : params.leads) ? 'leads' : null;
                        url = "/api/v4/companies/".concat(companyId, "?with=").concat(paramWith);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addCompany = function (company) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/companies";
                        return [4, this.axios.post(url, [company])];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getCompanyLinks = function (companyId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!companyId) {
                            throw new Error('no company id');
                        }
                        return [4, this.getLinksByEntityType('contacts', companyId)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoApiClient.prototype.getCompanyNotes = function (companyId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getNotesByEntityId('companies', companyId)];
            });
        });
    };
    AmoApiClient.prototype.getCompanyNoteById = function (companyId, noteId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getNoteById('companies', companyId, noteId)];
            });
        });
    };
    AmoApiClient.prototype.getCompaniesNotes = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getNotesByEntityType('companies', params)];
            });
        });
    };
    AmoApiClient.prototype.getCompanyFiles = function (companyId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getEntityFiles('companies', companyId)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    AmoApiClient.prototype.getCompaniesCustomFieldGroups = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/companies/custom_fields/groups";
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getCompaniesCustomFieldGroupById = function (groupId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/companies/custom_fields/groups/".concat(groupId);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getCompaniesCustomFields = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, params;
            return __generator(this, function (_a) {
                page = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page : 1;
                limit = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit : 50;
                params = { page: page, limit: limit };
                return [2, this.getCustomFieldsByEntityType('companies', params)];
            });
        });
    };
    AmoApiClient.prototype.getCompaniesTags = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getTags('companies', paramsIn)];
            });
        });
    };
    AmoApiClient.prototype.getEvents = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, url, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page : 1;
                        limit = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit : 50;
                        url = "/api/v4/events";
                        params = { page: page, limit: limit, with: 'contact_name,lead_name' };
                        return [4, this.axios.get(url, { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getEventById = function (eventId, paramWith) {
        return __awaiter(this, void 0, void 0, function () {
            var params, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = [];
                        if (paramWith === null || paramWith === void 0 ? void 0 : paramWith.catalogElements) {
                            params.push('catalog_elements');
                        }
                        if (paramWith === null || paramWith === void 0 ? void 0 : paramWith.lossReason) {
                            params.push('loss_reason');
                        }
                        if (paramWith === null || paramWith === void 0 ? void 0 : paramWith.contacts) {
                            params.push('contacts');
                        }
                        url = "/api/v4/events/".concat(eventId);
                        return [4, this.axios.get(url, { params: { with: params.join(',') } })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getEventTypes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/events/types";
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.notifyPhoneCall = function (phoneNumber, userIds) {
        return __awaiter(this, void 0, void 0, function () {
            var url, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v2/events";
                        data = {
                            add: [
                                {
                                    type: "phone_call",
                                    phone_number: phoneNumber,
                                    users: userIds,
                                },
                            ],
                        };
                        return [4, this.axios.post(url, data)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addPhoneCall = function (phoneCall) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/calls";
                        return [4, this.axios.post(url, [phoneCall])];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getTalks = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, params, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page : 1;
                        limit = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit : 250;
                        params = { page: page, limit: limit };
                        url = "/api/v4/talks";
                        return [4, this.axios.get(url, { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getUrl = function (url, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.get(url, options)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getTalkById = function (talkId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/talks/".concat(talkId);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.closeTalkById = function (talkId, forceClose) {
        return __awaiter(this, void 0, void 0, function () {
            var url, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/talks/".concat(talkId, "/close");
                        data = { force_close: forceClose };
                        return [4, this.axios.post(url, data)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getShortLinkForContact = function (url, contactId) {
        return __awaiter(this, void 0, void 0, function () {
            var apiUrl, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        apiUrl = "/api/v4/short_links";
                        data = [{
                                url: url,
                                metadata: {
                                    entity_type: "contacts",
                                    entity_id: contactId,
                                }
                            }];
                        return [4, this.axios.post(apiUrl, data)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getNotesByEntityType = function (entityType, paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page : 1;
                        limit = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit : 250;
                        params = { page: page, limit: limit };
                        return [4, this.axios.get("/api/v4/".concat(entityType, "/notes"), { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getContactNotes = function (contactId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getNotesByEntityId('contacts', contactId)];
            });
        });
    };
    AmoApiClient.prototype.getContactNoteById = function (contactId, noteId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getNoteById('contacts', contactId, noteId)];
            });
        });
    };
    AmoApiClient.prototype.getContactsNotes = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getNotesByEntityType('contacts', params)];
            });
        });
    };
    AmoApiClient.prototype.getNotesByEntityId = function (entityType, entityId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.get("/api/v4/".concat(entityType, "/").concat(entityId, "/notes"))];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getNoteById = function (entityType, entityId, noteId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.get("/api/v4/".concat(entityType, "/").concat(entityId, "/notes/").concat(noteId))];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addNote = function (entityType, entityId, note) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.post("/api/v4/".concat(entityType, "/").concat(entityId, "/notes"), { data: note })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getWidgets = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (params === null || params === void 0 ? void 0 : params.page) ? params === null || params === void 0 ? void 0 : params.page : 1;
                        limit = (params === null || params === void 0 ? void 0 : params.limit) ? params === null || params === void 0 ? void 0 : params.limit : 50;
                        url = "/api/v4/widgets";
                        url += "?page=".concat(page, "&limit=").concat(limit);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getWidget = function (widgetCode) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (widgetCode === '') {
                            throw new Error('ERROR_NO_WIDGET_CODE');
                        }
                        url = "/api/v4/widgets/".concat(widgetCode);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getSources = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.get("/api/v4/sources")];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getSourceById = function (sourceId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.get("/api/v4/sources/".concat(sourceId))];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addSource = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.post("/api/v4/sources", params)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.deleteSourceById = function (sourceId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.axios.delete("/api/v4/sources/".concat(sourceId))];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getSalesBots = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/bots/";
                        params = { with: 'launches', page: 1, limit: 50 };
                        return [4, this.axios.get(url, { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getTemplates = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, url, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page : 1;
                        limit = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit : 50;
                        url = "/api/v4/chats/templates";
                        params = { page: page, limit: limit };
                        return [4, this.axios.get(url, { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getTemplateById = function (templateId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/chats/templates/".concat(templateId);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.updateTemplateById = function (templateId, template) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/chats/templates/".concat(templateId);
                        return [4, this.axios.patch(url, template)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addTemplate = function (templates) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/chats/templates";
                        return [4, this.axios.post(url, templates)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.deleteTemplateById = function (templateId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/chats/templates/".concat(templateId);
                        return [4, this.axios.delete(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getLeadsWithFilter = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, query, filter, url, filterArr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (params === null || params === void 0 ? void 0 : params.page) ? params === null || params === void 0 ? void 0 : params.page : 1;
                        limit = (params === null || params === void 0 ? void 0 : params.limit) ? params === null || params === void 0 ? void 0 : params.limit : 50;
                        query = (params === null || params === void 0 ? void 0 : params.query) ? params === null || params === void 0 ? void 0 : params.query : null;
                        filter = (params === null || params === void 0 ? void 0 : params.filter) ? params === null || params === void 0 ? void 0 : params.filter : null;
                        url = "/api/v4/leads";
                        url += "?page=".concat(page, "&limit=").concat(limit);
                        if (query) {
                            url += "&query=".concat(query);
                        }
                        if (filter) {
                            filterArr = [];
                            if (filter.createdAtFrom) {
                                filterArr.push("filter[created_at][from]=".concat(filter.createdAtFrom));
                            }
                            if (filter.createdAtTo) {
                                filterArr.push("filter[created_at][to]=".concat(filter.createdAtTo));
                            }
                            url += "&" + filterArr.join('&');
                        }
                        url = encodeURI(url);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getTags = function (entityType, paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, url, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page : 1;
                        limit = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit : 250;
                        url = "/api/v4/".concat(entityType, "/tags");
                        params = { page: page, limit: limit };
                        return [4, this.axios.get(url, { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getTagsForLeads = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getTags('leads', paramsIn)];
            });
        });
    };
    AmoApiClient.prototype.addTag = function (entityType, params) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/".concat(entityType, "/tags");
                        return [4, this.axios.post(url, params)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addTagForLeads = function (tag) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.addTag('leads', [tag])];
            });
        });
    };
    AmoApiClient.prototype.appendTags = function (entityType, entityId, tags) {
        return __awaiter(this, void 0, void 0, function () {
            var url, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/".concat(entityType, "/").concat(entityId);
                        data = {
                            id: entityId,
                            "_embedded": { tags: tags },
                        };
                        return [4, this.axios.patch(url, data)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.appendTagsToLead = function (entityId, tags) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.appendTags('leads', entityId, tags)];
            });
        });
    };
    AmoApiClient.prototype.getUnsorted = function (paramsIn) {
        return __awaiter(this, void 0, void 0, function () {
            var page, limit, url, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        page = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.page : 1;
                        limit = (paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit) ? paramsIn === null || paramsIn === void 0 ? void 0 : paramsIn.limit : 250;
                        url = "/api/v4/leads/unsorted";
                        params = { page: page, limit: limit };
                        return [4, this.axios.get(url, { params: params })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getUnsortedSummary = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads/unsorted/summary";
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.getUnsortedByUID = function (uid) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads/unsorted/".concat(uid);
                        return [4, this.axios.get(url)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addUnsortedSip = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads/unsorted/sip";
                        return [4, this.axios.post(url, data)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.addUnsortedForms = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads/unsorted/forms";
                        return [4, this.axios.post(url, data)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.acceptUnsorted = function (uid, userId, statusId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads/unsorted/".concat(uid, "/accept");
                        return [4, this.axios.post(url, { user_id: userId, status_id: statusId })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.declineUnsorted = function (uid, userId) {
        return __awaiter(this, void 0, void 0, function () {
            var data, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = userId ? { user_id: userId } : null;
                        url = "/api/v4/leads/unsorted/".concat(uid, "/decline");
                        return [4, this.axios.delete(url, { data: data })];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    AmoApiClient.prototype.linkUnsorted = function (uid, data) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/api/v4/leads/unsorted/".concat(uid, "/link");
                        return [4, this.axios.post(url, data)];
                    case 1: return [2, (_a.sent()).data];
                }
            });
        });
    };
    return AmoApiClient;
}());
exports.AmoApiClient = AmoApiClient;
